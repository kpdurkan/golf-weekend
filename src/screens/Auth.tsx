// src/screens/Auth.tsx
import * as React from 'react';
import { View, Text, TextInput, Button, Pressable } from 'react-native';
import * as Linking from 'expo-linking';
import Constants from 'expo-constants';
import { supabase } from '../lib/supabase';
import { Image } from 'react-native';
import { Brand } from '../theme/brand';


type Mode = 'signin' | 'signup';

<Image source={Brand.logo} style={{ width: 128, marginBottom: 9, resizeMode: 'contain' }} />

function isValidEmail(e: string) {
  return /\S+@\S+\.\S+/.test(e);
}

function getRedirectUrl() {
  // In TestFlight/App Store builds, open our custom scheme.
  // In Expo Go / dev, use exp:// (generated by Linking).
  const isStandalone = Constants.appOwnership === 'standalone';
  return isStandalone ? 'kdt://auth-callback' : Linking.createURL('auth-callback');
}

export default function AuthScreen() {
  const [mode, setMode] = React.useState<Mode>('signin');
  const [email, setEmail] = React.useState('');
  const [password, setPassword] = React.useState('');
  const [busy, setBusy] = React.useState(false);

  // Password reset flow UI
  const [resetMode, setResetMode] = React.useState(false);
  const [newPass, setNewPass] = React.useState('');

  // 1) Listen for Supabase PASSWORD_RECOVERY event (web handles this automatically)
  React.useEffect(() => {
    const sub = supabase.auth.onAuthStateChange((event) => {
      if (event === 'PASSWORD_RECOVERY') setResetMode(true);
    });
    return () => sub.data.subscription?.unsubscribe();
  }, []);

  // 2) Handle incoming deep links on native (Expo Go / standalone)
  //    Password reset links look like: ...?type=recovery&access_token=...&refresh_token=...
  React.useEffect(() => {
    const handleUrl = async (incoming?: string | null) => {
      if (!incoming) return;
      try {
        const parsed = Linking.parse(incoming);
        const qp = parsed.queryParams || {};
        const type = String(qp.type || '');
        const access_token = String((qp.access_token || '') as string);
        const refresh_token = String((qp.refresh_token || '') as string);
        if (type.toLowerCase() === 'recovery' && access_token && refresh_token) {
          const { error } = await supabase.auth.setSession({ access_token, refresh_token });
          if (!error) setResetMode(true);
        }
      } catch {}
    };
    Linking.getInitialURL().then(handleUrl).catch(() => {});
    const sub = Linking.addEventListener('url', (e) => handleUrl(e.url));
    return () => (sub as any)?.remove?.();
  }, []);

  const signIn = async () => {
    if (!isValidEmail(email)) return alert('Please enter a valid email.');
    if (!password || password.length < 6) return alert('Password must be at least 6 characters.');
    setBusy(true);
    const { error } = await supabase.auth.signInWithPassword({ email, password });
    setBusy(false);
    if (error) alert(error.message);
  };

  const signUp = async () => {
    if (!isValidEmail(email)) return alert('Please enter a valid email.');
    if (!password || password.length < 6) return alert('Password must be at least 6 characters.');
    setBusy(true);
    const { error } = await supabase.auth.signUp({ email, password });
    setBusy(false);
    if (error) {
      if (/already registered/i.test(error.message)) {
        alert('This email already has an account. Switching to Sign in.');
        setMode('signin');
      } else {
        alert(error.message);
      }
      return;
    }
    alert('Account created. You can now sign in.');
    setMode('signin');
  };

  const sendReset = async () => {
    if (!isValidEmail(email)) return alert('Enter your email first.');
    const redirectTo = getRedirectUrl(); // exp://... in dev, kdt://auth-callback in builds
    console.log('Password reset redirectTo =', redirectTo);
    const { error } = await supabase.auth.resetPasswordForEmail(email, { redirectTo });
    if (error) alert(error.message);
    else alert('Password reset email sent. Open it on this device.');
  };

  const applyNewPass = async () => {
    if (!newPass || newPass.length < 6) return alert('Use at least 6 characters.');
    setBusy(true);
    const { error } = await supabase.auth.updateUser({ password: newPass });
    setBusy(false);
    if (error) alert(error.message);
    else {
      alert('Password updated. You are now signed in.');
      setResetMode(false);
      setNewPass('');
    }
  };

  // —— Reset password screen ——
  if (resetMode) {
    return (
      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center', gap: 12, padding: 16 }}>
        <Text style={{ fontSize: 20, fontWeight: '700' }}>Set a new password</Text>
        <TextInput
          value={newPass}
          onChangeText={setNewPass}
          placeholder="New password"
          secureTextEntry
          autoCapitalize="none"
          style={{ width: '90%', maxWidth: 420, borderWidth: 1, borderColor: '#ddd', padding: 12, borderRadius: 8 }}
        />
        <Button title={busy ? 'Saving…' : 'Set password'} onPress={applyNewPass} disabled={busy} />
        <Pressable onPress={() => setResetMode(false)}>
          <Text style={{ color: '#2563eb', marginTop: 8 }}>Back to sign in</Text>
        </Pressable>
      </View>
    );
  }

  // —— Sign in / Sign up screen ——
  const isSignup = mode === 'signup';

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center', gap: 12, padding: 16 }}>
      <Text style={{ fontSize: 20, fontWeight: '700' }}>KDT – {isSignup ? 'Create account' : 'Sign in'}</Text>

      <TextInput
        value={email}
        onChangeText={setEmail}
        placeholder="you@yourdomain.com"
        keyboardType="email-address"
        autoCapitalize="none"
        autoCorrect={false}
        style={{ width: '90%', maxWidth: 420, borderWidth: 1, borderColor: '#ddd', padding: 12, borderRadius: 8 }}
      />
      <TextInput
        value={password}
        onChangeText={setPassword}
        placeholder="Password"
        secureTextEntry
        autoCapitalize="none"
        style={{ width: '90%', maxWidth: 420, borderWidth: 1, borderColor: '#ddd', padding: 12, borderRadius: 8 }}
      />

      {isSignup ? (
        <Button title={busy ? 'Please wait…' : 'Create account'} onPress={signUp} disabled={busy} />
      ) : (
        <Button title={busy ? 'Please wait…' : 'Sign in'} onPress={signIn} disabled={busy} />
      )}

      {!isSignup && (
        <Pressable onPress={sendReset} style={{ marginTop: 4 }}>
          <Text style={{ color: '#2563eb' }}>Forgot password?</Text>
        </Pressable>
      )}

      <Pressable onPress={() => setMode(isSignup ? 'signin' : 'signup')} style={{ marginTop: 8 }}>
        <Text style={{ color: '#6b7280' }}>
          {isSignup ? 'Already have an account? Sign in' : "Don't have an account? Create one"}
        </Text>
      </Pressable>
    </View>
  );
}

